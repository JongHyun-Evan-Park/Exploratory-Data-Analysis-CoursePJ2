server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui,server)
}
multiplyNumbers()
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height="100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!", xlab = "Girth", ylab = "Volume")
})
}
runGadget(ui,server)
}
pickTrees()
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height="100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!", xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees,input$brush, xvar = "Grith", yvar = "Volume"))
})
}
runGadget(ui,server)
}
pickTrees()
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height="100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!", xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees,input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui,server)
}
pickTrees()
pickTrees()
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits,"Fruit","Year",
options = list(width=600, height=400)); print(M,"chart")
plot(M)
M
colorvar = "Profit", options = list(width=600,height=400); print(G,"chart")
G <- gvisGeoChart(Exports, locationvar = "Country",
G <- gvisGeoChart(Exports, locationvar = "Country",
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400); print(G,"chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400)
print(G,"chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400))
print(G,"chart")
plot(G)
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = Profit, options=list(projection="kavrayskiy-vii"))
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options=list(projection="kavrayskiy-vii"))
plot(G2)
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options=list(region = "150"))
plot(G2)
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3
plot(G3)
plot(G3)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
head(quakes)
G6 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G6)
M <- gvisMotionChart(Fruits,idvar = "Fruit", timevar = "Year",
options = list(width=600, height=400), chartid); print(M,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
M <- gvisMotionChart(Fruits,idvar = "Fruit", timevar = "Year", options = list(width=600, height=400))
plot(M)
data("Fruits")
M <- gvisMotionChart(Fruits,idvar = "Fruit", timevar = "Year", options = list(width=600, height=400))
plot(M)
M <- gvisMotionChart(Fruits,"Fruit", "Year", options = list(width=600, height=400))
plot(M)
plot(M)
myStateSettings <- '\n{"iconType":"LINE", "dimensions":{
"iconDimensions":["dim0"]},"xAxisOption":"_TIME",
"orderedByX":false,"orderedByY":false,"yZoomedDataMax":100}\n'
plot(gvisMotionChart(Fruits, "Fruit", "Year",
options=list(state=myStateSettings, height=320)))
G <- gvisGeoChart(Exports, "Country", "Profit",
options=list(width=250, height=120))
B <- gvisBarChart(Exports[,1:2], yvar="Profit", xvar="Country",
options=list(width=250, height=260, legend='none'))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=400, height=380))
GBM <- gvisMerge(gvisMerge(G,B, horizontal=FALSE),
M, horizontal=TRUE, tableOptions="cellspacing=5")
plot(GBM)
?par
library(lattice)
str(state.x77)
state.x77$state.region
colname(state.x77)
colnames(state.x77)
data.frame(state.x77)
data.frame(state.x77, region = state.region)
data.frame(state.x77, region = state.region)$region
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state)
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
?qplot
pch$show()
pch$show()
points
example(points)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
skip()
dim(pollution)
summary(pollution$pm25)
summary(ppm)
skip()
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
skip()
high
hist(ppm, col = "green", breaks = 100)
rug
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd= 2)
abline(v=median(ppm), col = "magenta", lwd = 4)
skIp()
skip()
skip()
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east<-subset(pollution, region == "east")
head(east)
hist(east$pm25)
hist(east$pm25, col = "green")
west<-subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col = "green"
)
skip()
with(pollution, plot(latitude, pm25))
abline(h=12, lwd =2 , lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd= 2, lty = 2)
skip()
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25,title="West")
plot(west$latitude,west$pm25,main ="West")
east <- subset(pollution, region=="east")
plot(east$latitude,east$pm25,main ="East")
?Devices
skip()
with(faithful, plot(eruptions, waiting, main="Old Faithful Geyser data"))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main="Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting)
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
skip()
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(states)
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airqulity$Month)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airqualtiy, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
par()
names(par())
?par
par()$pin
par('fg')
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality$Month == 5)
may <- subset(airquality$Month = 5)
may <- subset(airquality, Month ==5)
points(may$Wind, may$Ozone, col = "blue", pch = 2)
points(may$Wind, may$Ozone, pch = 17)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, !(Month == 5)
)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch="8")
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", pch=c(17,8), col = c("blue","red"), legend = c("May", "Other Months"))
line(v = median(airquality$Wind), lty = 2, lwd = 2)
lines(v = median(airquality$Wind), lty = 2, lwd = 2)
lines(x = median(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$SOlar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1,), oma = c(0,0,2,0))
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
skip()
skip()
title(mtext = "Ozone and Weather in New York City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
svd1$d[1]
svd1 <- svd(scale(dataMatrixOrdered));svd2 <- svd(scale(dataMatrix2))
set.seed(2021)
dataMatrix <- matrix(rnorm(400),nrow=40)
for(i in 1:40){
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each = 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(constantMatrix)[1]){
constantMatrix[i,] <- rep(c(0,1),each = 5)
}
set.seed(678910)
for(i in 1:40){
coinFlip1 <- rbinom(1, size=1, prob=0.5)
coinFlip2 <- rbinom(1, size=1, prob=0.5)
if(coinFlip1){
dataMatrix[i,] <- dataMatrix[i,]+rep(c(0,5),each=5)
}
if(coinFlip2){
dataMatrix[i,] <- dataMatrix[i,]+rep(c(0,5),5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
svd2 <- svd(scale(dataMatrixOrdered))
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100,size=40,replace=FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data
svd1 <- svd(scale(dataMatrixOrdered));svd2 <- svd(scale(dataMatrix2))
approx1 <- svd1$u[,1] %*% t(svd$v[,1]) %*% svd1$d[1]
svd1$d[1]
svd1$u
View(svd1$u)
svd1$u[,1]
View(svd1)
svd1[["d"]]
svd1[["u"]]
View(svd1[["u"]])
View(svd1$u[,1] +*+ t(svd1[,1:5]))
View(svd1$u[,1:] +*+ t(svd1[,1:5]))
View(svd1$u[,1:5] +*+ t(svd1[,1:5]))
View(svd1$u[,1:5] %*% t(svd1[,1:5]))
svd1$u[,1:5] %*% t(svd1[,1:5]
svd1$u[,1:5] %*% t(svd1[,1:5]
)
svd1$u[,1:5] %*% t(svd1[,1:5])
svd1$u[,1] %*% t(svd1[,1])
svd1$u[,1] %*% t(svd1$v[,1])
View(svd1$u[,1] %*% t(svd1$v[,1]))
View(svd1$u[,1])
View(svd$v[,1])
View(svd1$v[,1])
View(t(svd1$v[,1]))
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
?grDevices
?grDevices()
library(help="grDevices")
library(help="ggplot2")
pal <- colorRamp(c("cyan","yellow"))
pal(0)
# RColorBrewer
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3,"BuGn")
library(help="RColorBrewer")
?RColorBrewer
brewer.pal.info
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
cols <- brewer.pal(3,"Purples") # 첫번째: 색깔 수, 두번째: pallete 종류
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
cols <- brewer.pal(3,"Accent") # 첫번째: 색깔 수, 두번째: pallete 종류
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
set.seed(2021)
x <- rnorm(10000)
y <- rnorm(10000)
set.seed(2021)
x <- rnorm(10000)
set.seed(2021)
y <- rnorm(10000)
smoothScatter(x,y)
set.seed(200000)
x <- rnorm(10000)
set.seed(200000)
y <- rnorm(10000)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
# rgb function
# colorspace function
?colorspace
# rgb function
# colorspace function
install.packages("colorspace")
library(colorspace)
?colorspace
library(colorspace)
?colorspace
?colorspace()
library(help="colorspace")
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4,col="red")
5
5
12
abline(h=.05,col="green")
dist(dFam)
dist(dFsm)
hc
heatmap(dataMatrix,col = cm.colors(25))
heatmap(mtcars)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,col=cols1,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2],)
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1 <- svd(daaMatrix)
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
(svd1$u[,1] * svd1$d[,1]) %*% svd1$v[,1]
(svd1$u[,1] * svd1$d[1]) %*% svd1$v[,1]
a1 <- svd1$u[,1] %*% svd1$v[,1] *svd1$u[1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) *svd1$u[1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) *svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$dp1:5)%*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5])%*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10])%*% t(svd1$v[,1:10]))
Url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
setwd("c:/R/Coursera_R_programming/Exploratory_Data_Analysis/CoursePJ")
FilePath <-  "./data/exdata_data_NEI_data"
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
em2008 <- NEI[which(NEI$year==2008),]
summary(em2008)
em2005 <- NEI[which(NEI$year==2005),]
em2002 <- NEI[which(NEI$year==2002),]
em1999 <-NEI[which(NEI$year==1999),]
with(NEI,plot(sum(Emission)~year))
with(NEI,plot(sum(Emissions)~year))
em2008 <- which(NEI$year==2008)
em2005 <- which(NEI$year==2005)
em2002 <- which(NEI$year==2002)
em1999 <-which(NEI$year==1999)
tapply(NEI,year,sum)
tapply(NEI,NEI$year,sum)
tapply(NEI,as.factor(NEI$year),sum)
#1 use base plotting system to make a plot showing the total PM2.5 emission from all sources for each of the years 1999, 2002, 2005, and 2008.
NEI$year <- as.factor(NEI$year)
tapply(NEI,NEI$year,sum)
tapply(NEI,NEI$year,sum, na.rm=TRUE)
tapply(NEI$Emissions,NEI$year,sum, na.rm=TRUE)
summary(NEI)
is.na(NEI)
sum(is.na(NEI))
tapply(NEI$Emissions,NEI$year,sum)
TOTALEM <- tapply(NEI$Emissions,NEI$year,sum)
plot(TOTALEM)
plot(TOTALEM, type="l")
rownames(TOTALEM) <- c("Year", "Total emmissions")
str(TOTALEM)
TOTALEM[1]
TOTALEM[,1]
library(dplyr)
NEI %>% select(Emissions, year) %>% group_by(year) %>% mutate(TOTALEM = sum(Emissions)) %>% print
NEI %>% select(Emissions, year) %>% group_by(year) %>% mutate(TOTALEM = sum(Emissions)) %>% plot()
NEI %>% select(Emissions, year) %>% group_by(year) %>% mutate(TOTALEM = sum(Emissions)) %>% plot(year, TOTALEMS)
TOTALEM
str(TOTALEM)
dimnames(TOTALEM)
